@charset "UTF-8";
/* Sass 允许将一套 CSS 样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器 */
#main p {
  color: #00ff00;
  width: 97%; }
  #main p .redbox {
    background-color: #ff0000;
    color: #000000; }

#main {
  width: 97%; }
  #main p, #main div {
    font-size: 2em; }
    #main p a, #main div a {
      font-weight: bold; }
  #main pre {
    font-size: 3em; }

/* 在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 hover 样式时，
或者当 body 元素有某个 classname 时，可以用 & 代表嵌套规则外层的父选择器。 */
a {
  font-weight: bold;
  text-decoration: none; }
  a:hover {
    text-decoration: underline; }
  body.firefox a {
    font-weight: normal; }

/* 编译后的 CSS 文件中 & 将被替换成嵌套外层的父选择器，如果含有多层嵌套，最外层的父选择器会一层一层向下传递： */
#main {
  color: black; }
  #main a {
    font-weight: bold; }
    #main a:hover {
      color: red; }

#main {
  color: black; }
  #main-sidebar {
    border: 1px solid; }

/* 有些 CSS 属性遵循相同的命名空间 (namespace)，比如 font-family, font-size, font-weight 
都以 font 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中，例如： */
.funky {
  font-family: fantasy;
  font-size: 30em;
  font-weight: bold; }

.funky {
  font: 20px/24px;
    font-family: fantasy;
    font-weight: bold; }

p.foo {
  border-color: blue; }

p {
  font: 12px/30px; }

#clearfix {
  display: inline-block; }
  #clearfix:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden; }
  * html #clearfix {
    height: 1px; }

/* Sass 允许将一套 CSS 样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器 */
#main p{
	color: #00ff00;
	width: 97%;
	.redbox{
		background-color: #ff0000;
		color: #000000;
	}
}
#main {
  width: 97%;

  p, div {
    font-size: 2em;
    a { font-weight: bold; }
  }

  pre { font-size: 3em; }
}
/* 在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 hover 样式时，
或者当 body 元素有某个 classname 时，可以用 & 代表嵌套规则外层的父选择器。 */
a {
  font-weight: bold;
  text-decoration: none;
  &:hover { text-decoration: underline; }
  body.firefox & { font-weight: normal; }
}
/* 编译后的 CSS 文件中 & 将被替换成嵌套外层的父选择器，如果含有多层嵌套，最外层的父选择器会一层一层向下传递： */
#main {
  color: black;
  a {
    font-weight: bold;
    &:hover { color: red; }
  }
}
#main {
  color: black;
  &-sidebar { border: 1px solid; }
}
/* 有些 CSS 属性遵循相同的命名空间 (namespace)，比如 font-family, font-size, font-weight 
都以 font 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，Sass 允许将属性嵌套在命名空间中，例如： */
.funky {
  font: {
    family: fantasy;
    size: 30em;
    weight: bold;
  }
}
.funky {
  font: 20px/24px {
    family: fantasy;
    weight: bold;
  }
}
// 通过 #{} 插值语句可以在选择器或属性名中使用变量：
$name: foo;
$attr: border;
p.#{$name} {
  #{$attr}-color: blue;
}
// #{} 插值语句也可以在属性值中插入 SassScript，大多数情况下，这样可能还不如使用变量方便
// 但是使用 #{} 可以避免 Sass 运行运算表达式，直接编译 CSS。
p {
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size}/#{$line-height};
}
#clearfix {
  display: inline-block;
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
  * html & { height: 1px }
}